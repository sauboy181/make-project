from turtle import speed
import pygame
from settings import *


class Player(pygame.sprite.Sprite):
    def __init__(self, pos, groups, obstacle_sprites):
        super().__init__(groups)
        self.image = pygame.image.load("../graphics/test/player.png").convert_alpha()
        self.rect = self.image.get_rect(topleft=pos)
        self.hitbox = self.rect.inflate(0, -26)

        # Movement
        self.direction = pygame.math.Vector2()  # Vector that is going to have x and y
        self.speed = 5
        self.attacking = False
        self.attack_cooldown = 400
        self.attack_time = None

        self.obstacle_sprites = obstacle_sprites

    def input(self):
        keys = pygame.key.get_pressed()

        # Movement Input
        if keys[pygame.K_UP]:
            self.direction.y = -1  # Going up
        elif keys[pygame.K_DOWN]:
            self.direction.y = 1  # Going down
        else:
            self.direction.y = 0  # IF neither up or down key being pressed player does not move
        
        if keys[pygame.K_RIGHT]:
            self.direction.x = 1
        elif keys[pygame.K_LEFT]:
            self.direction.x = -1
        else:
            self.direction.x = 0

    def update(self, speed):  # Update + draw the game
        if self.direction.magnitude() != 0:  # Vector of 0 can not be normalized
            self.direction = self.direction.normalize()  # Vector length = 1

        self.hitbox.x += self.direction.x * speed
        self.collision("horizontal")  # Horizontal Collisions
        self.hitbox.y += self.direction.y * speed
        self.collision("horizontal")  # Vertical Collisions
        self.rect.center = self.hitbox.center

    def collision(self, direction):  # Check for collisions
        if direction == "horizontal":
            for sprite in self.obstacle_sprites:
                if sprite.hitbox.colliderect(self.hitbox):
                    if self.direction.x > 0:  # Moving right
                        self.hitbox.right = sprite.hitbox.left
                if sprite.hitbox.colliderect(self.hitbox):
                    if self.direction.x < 0:  # Moving left
                        self.hitbox.right = sprite.hitbox.right
        if direction == "vertical":
            for sprite in self.obstacle_sprites:
                if sprite.rect.colliderect(self.rect):
                    if self.direction.y > 0:  # Moving down
                        self.rect.bottom = sprite.rect.up
                if sprite.rect.colliderect(self.rect):
                    if self.direction.y < 0:  # Moving up
                        self.rect.top = sprite.rect.down

    def cooldowns(self):
        current_time = pygame.time.get_ticks()

        if self.attacking:
                if current_time - self.attacking >= self.attack_cooldown:
                    self.attacking = False

    def update(self):
        self.input()
        self.cooldowns()
        self.move(self.speed)

